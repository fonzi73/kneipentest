<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Kneipe
 *
 * @author fonzi
 */
class Kneipe {

    // Attribute
    private $id;
    private $kneipenname;
    private $art;
    private $kommentar;
    private $note;

    //Konstruktor
    public function __construct($kneipenname, $art, $note, $kommentar, $id = NULL) {
        if (!is_null($id)) {
            $this->id = $id;
        }
        $this->kneipenname = $kneipenname;
        $this->art = $art;
        $this->kommentar = $kommentar;
        $this->note = $note;
    }

    // Getter
    public function getId() {
        return $this->id;
    }

    public function getKneipenname() {
        return $this->kneipenname;
    }

    public function getArt() {
        return $this->art;
    }

    public function getKommentar() {
        return $this->kommentar;
    }

    public function getNote() {
        return $this->note;
    }

    // Get All und Insert
    public static function getAll() {
        $db = DbConnect::getConnection();
        $stmt = $db->prepare("SELECT * FROM kneipen");
        $stmt->execute();
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $kneipen = [];
        foreach ($rows as $row) {
            $kneipen[] = new Kneipe($row['Kneipenname'], $row['Art'], $row['Note'], $row['Kommentar']);
        }
        return $kneipen;
    }

    public static function insert(Kneipe $k) {
        $db = DbConnect::getConnection();
// sql statement mit prepared statements
        $stmt = $db->prepare("INSERT INTO kneipen VALUES(NULL, ?, ?, ?, ?)");

        $stmt->bindValue(1, $k->getKneipenname(), PDO::PARAM_STR);
        $stmt->bindValue(2, $k->getArt(), PDO::PARAM_STR);
        $stmt->bindValue(3, $k->getNote(), PDO::PARAM_INT);
        $stmt->bindValue(4, $k->getKommentar(), PDO::PARAM_STR);

        $stmt->execute();
    }

    public static function getByLikeness($suchstring) {
        $db = DbConnect::getConnection();
// $suchstring enthÃ¤lt den zu suchenden Teilstring
// sql statement mit prepared statements
        $stmt = $db->prepare("SELECT * FROM kneipen WHERE kommentar LIKE ? "
                . " or kneipenname LIKE ? or art LIKE ?");
        $stmt->bindValue(1, "%$suchstring%", PDO::PARAM_STR);
        $stmt->bindValue(2, "%$suchstring%", PDO::PARAM_STR);
        $stmt->bindValue(3, "%$suchstring%", PDO::PARAM_STR);
        $stmt->execute();
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $kneipen = [];
        foreach ($rows as $row) {
            $kneipen[] = new Kneipe($row['Kneipenname'], $row['Art'], $row['Note'], $row['Kommentar']);
        }
        return $kneipen;
    }

    public static function getNamesByLikeness($term) {
        $db = DbConnect::getConnection();
// $suchstring enthÃ¤lt den zu suchenden Teilstring
// sql statement mit prepared statements
        $stmt = $db->prepare("SELECT kneipenname FROM kneipen WHERE kommentar LIKE ? "
                . " or kneipenname LIKE ? or art LIKE ?");
        $stmt->bindValue(1, "%$term%", PDO::PARAM_STR);
        $stmt->bindValue(2, "%$term%", PDO::PARAM_STR);
        $stmt->bindValue(3, "%$term%", PDO::PARAM_STR);
        $stmt->execute();
        $rows = $stmt->fetchAll(PDO::FETCH_OBJ);
        $names = [];
        foreach ($rows as $row) {
            $names[] = $row->kneipenname;
        }
        return $names;
    }

}
